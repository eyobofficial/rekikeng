# Generated by Django 2.2.12 on 2023-11-23 14:04

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import pages.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('name', models.CharField(max_length=60, verbose_name='Company full name')),
                ('tagline', models.CharField(max_length=255, verbose_name='Company tagline')),
                ('quote', models.TextField()),
                ('quote_speaker', models.CharField(default='Unkown', max_length=60, verbose_name='Featured quote speaker')),
                ('keywords', models.TextField(blank=True)),
                ('description1', models.TextField(verbose_name='Company description')),
                ('description2', models.TextField(verbose_name='More company description')),
                ('team_description', models.TextField(verbose_name='Short team description')),
                ('location', models.CharField(max_length=100, verbose_name='Location name')),
                ('subcity', models.CharField(max_length=100)),
                ('city', models.CharField(default='Addis Ababa', max_length=100)),
                ('country', models.CharField(default='Ethiopia', max_length=100)),
                ('email', models.EmailField(max_length=100)),
                ('phone', models.CharField(max_length=20, verbose_name='Phone number')),
                ('facebook', models.URLField(blank=True)),
                ('twitter', models.URLField(blank=True)),
                ('instagram', models.URLField(blank=True)),
                ('linkedin', models.URLField(blank=True)),
                ('logo', models.ImageField(blank=True, help_text='Upload 100x69 pixels trasparent PNG image file.', null=True, upload_to='logo/', verbose_name='Logo (Desktop)')),
                ('logo_hover', models.ImageField(blank=True, help_text='Upload 100x69 pixels trasparent PNG image file.', null=True, upload_to='logo/', verbose_name='Logo on hover (Desktop)')),
                ('logo_mobile', models.ImageField(blank=True, help_text='Upload 597x412 pixels trasparent PNG image file.', null=True, upload_to='logo/', verbose_name='Logo for mobile')),
                ('fevicon', models.ImageField(blank=True, help_text='Upload 23x16 pixels .ico icon file.', null=True, upload_to='fevicon/', verbose_name='Fevicon (Title Icon)')),
            ],
            options={
                'verbose_name_plural': 'Company',
            },
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('title', models.CharField(max_length=255)),
                ('icon', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'Process',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('title', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True, help_text='Short description with less than 255 letters.', max_length=255)),
                ('wallpaper', models.ImageField(help_text='Upload a 1440x960 pixel .jpg image.', upload_to=pages.models.slide_path)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modified date')),
                ('full_name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=100)),
                ('bio', models.TextField(verbose_name='Short bio')),
                ('avatar', models.ImageField(blank=True, help_text='Upload a 360x360 pixel .jpg image.', upload_to=pages.models.staff_avatar_path)),
                ('cv', models.FileField(blank=True, upload_to=pages.models.staff_cv_path)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
